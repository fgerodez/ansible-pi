- name: Create certbot volume
  become: true
  ansible.builtin.file:
    path: "{{ mail_vol_base }}/certbot"
    mode: "700"
    state: directory
    owner: "{{ userns_root_uid }}"
    group: "{{ userns_root_uid }}"
  
- name: Copy ovh api keys
  become: true
  ansible.builtin.copy:
    src: ovh.ini
    dest: "{{ mail_vol_base }}/ovh.ini"
    mode: "0600"
    owner: "{{ userns_root_uid }}"
    group: "{{ userns_root_uid }}"

- name: Check certificate existence
  become: true
  ansible.builtin.stat:
    path: "{{ mail_vol_base }}/certbot/live/{{ mail_hostname }}"
  register: certFolder
    
- name: Initialize ssl certificate
  become: true
  community.docker.docker_container:
    name: certbot
    detach: false
    cleanup: yes
    image: certbot/dns-ovh
    command: "certonly \
    --dns-ovh \
    --network {{ mail_bridge_name }} \
    --dns-ovh-credentials /etc/letsencrypt/ovh.ini \
    --dns-ovh-propagation-seconds 60 \
    --non-interactive \
    --agree-tos \
    --email {{ mail_owner_email }} \
    --domains {{ mail_hostname }}"
    volumes:
      - "{{ mail_vol_base }}/certbot:/etc/letsencrypt"
      - "{{ mail_vol_base }}/ovh.ini:/etc/letsencrypt/ovh.ini:ro"
    userns_mode: host
    networks:
      - name: "host"
  when: not certFolder.stat.exists

- name: Copy certbot systemd service
  become: true
  ansible.builtin.template:
    src: "certbot/certbot.service.j2"
    dest: /etc/systemd/system/
    mode: "644"
  
- name: Copy certbot systemd timer
  become: true
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /etc/systemd/system/
    mode: u=rw,g=r,o=r
    directory_mode: u=rwx,g=rx,o=rx
  loop:
    - certbot.timer
      
- name: Enable certbot timer
  become: true
  ansible.builtin.systemd:
    name: certbot.timer
    enabled: true
    daemon_reload: true
